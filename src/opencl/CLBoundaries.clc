/*
 * ------------------------------------------
 *
 *  HIGH-PERFORMANCE INTEGRATED MODELLING SYSTEM (HiPIMS)
 *  Luke S. Smith and Qiuhua Liang
 *  luke@smith.ac
 *
 *  School of Civil Engineering & Geosciences
 *  Newcastle University
 * 
 * ------------------------------------------
 *  This code is licensed under GPLv3. See LICENCE
 *  for more information.
 * ------------------------------------------
 *  BOUNDARY CONDITIONS
 * ------------------------------------------
 *  Management functions for a domain
 *  boundaries.
 * ------------------------------------------
 *
 */

__kernel void bdy_Promaides (
	__global		cl_double const * restrict	pBoundaryArray,
	__global		cl_double *					pTime,
	__global		cl_double4 *				pCellState,
	__global		cl_double *					pCellBed
	)
{
	// Which global series are we processing, and which cell
	// Global ID is X, Y cell, then Z for the series
	__private cl_long		lIdxX = get_global_id(0);
	__private cl_long		lIdxY = get_global_id(1);
	__private cl_ulong		ulIdx;

	//Todo: Alaa change this to accomidate for new size of grid
	// Don't bother if we've gone beyond the domain bounds
	if (lIdxX > DOMAIN_COLS - 1 ||
		lIdxY > DOMAIN_ROWS - 1 ||
		lIdxX < 0 ||
		lIdxY < 0 )
		return;

	ulIdx = getCellID(lIdxX, lIdxY);

	__private cl_double					dRate			= pBoundaryArray[ulIdx];
	__private cl_double					dLclTimestep	= *pTime;
	__private cl_double4				pCellData		= pCellState[ulIdx];
	__private cl_double					dCellBedElev	= pCellBed[ulIdx];

	// Hydrological processes have their own timesteps
	if (dLclTimestep <= 0.0)
		return;

	// This would already be represented in the series
	//if (pCellData.y <= -9999.0 || pCellData.x == -9999.0)
	//	return;

	//Todo: Alaa this goes under the bed elevation. Add a max function
	// Apply the value...
	pCellData.x = max(dCellBedElev, pCellData.x + dRate * dLclTimestep);
	if ( lIdxX == 99 && lIdxY == 99)
	{	
		//printf("x: %f y: %f z: %f w: %f Rate: %f step: %f \n", pCellData.x, pCellData.y, pCellData.z, pCellData.w, dRate, dLclTimestep);
	}
	// Return to global memory
	pCellState[ulIdx] = pCellData;
}
