/*
 * ------------------------------------------
 *
 *  HIGH-PERFORMANCE INTEGRATED MODELLING SYSTEM (HiPIMS)
 *  Luke S. Smith and Qiuhua Liang
 *  luke@smith.ac
 *
 *  School of Civil Engineering & Geosciences
 *  Newcastle University
 * 
 * ------------------------------------------
 *  This code is licensed under GPLv3. See LICENCE
 *  for more information.
 * ------------------------------------------
 *  INERTIAL SCHEME
 * ------------------------------------------
 *  Implementation of the simplified inertial
 *  scheme
 * ------------------------------------------
 *
 */

 #define Cfacweir 2.95245
 #define flow_epsilon 1.0e-9

/*
 *  Calculate everything without using LDS caching
 */
__kernel REQD_WG_SIZE_FULL_TS
void pro_cacheDisabled ( 
			__constant	cl_double *  				dTimestep,						// Timestep
			__global	cl_double const * restrict	dBedElevation,					// Bed elevation
			__global	cl_double4 *  			pCellStateSrc,					// Current cell state data
			__global	cl_double4 *  			pCellStateDst,					// Current cell state data
			__global	cl_double const * restrict	dManning,						// Manning values
			__global	bool const * restrict	pUsePoleni						// Manning values
		)
{

	// Identify the cell we're reconstructing (no overlap)
	__private cl_long					lIdxX			= get_global_id(0);
	__private cl_long					lIdxY			= get_global_id(1);
	__private cl_ulong					ulIdx, ulIdxNeig;
	__private cl_uchar					ucDirection;
	
	ulIdx = getCellID(lIdxX, lIdxY);

	// Don't bother if we've gone beyond the domain bounds
	if ( lIdxX > DOMAIN_COLS - 1 || 
		 lIdxY > DOMAIN_ROWS - 1 || 
		 lIdxX < 0 || 
		 lIdxY < 0 ) 
		return;

	__private cl_double		dLclTimestep	= *dTimestep;
	__private cl_double		dManningCoef, dDeltaFSL, pNeigManN, pNeigManE, pNeigManS,pNeigManW;
	__private cl_double		dCellBedElev,dNeigBedElevN,dNeigBedElevE,dNeigBedElevS,dNeigBedElevW;
	__private cl_double4	pCellData,pNeigDataN,pNeigDataE,pNeigDataS,pNeigDataW;		
	__private bool			usePoleniN,usePoleniE,usePoleniS,usePoleniW;
	__private cl_double2	dDischarges[4];							
	__private cl_uchar		ucDryCount		= 0;
	

	// Also don't bother if we've gone beyond the total simulation time
	if ( dLclTimestep <= 0.0 )
		return;

	// Load cell data
	dCellBedElev		= dBedElevation[ ulIdx ];
	pCellData			= pCellStateSrc[ ulIdx ];
	dManningCoef		= dManning[ ulIdx ];

	// Cell disabled?
	if ( pCellData.y <= -9999.0 || pCellData.x == -9999.0 )
	{
		pCellStateDst[ ulIdx ] = pCellData;
		return;
	}

	ucDirection = DOMAIN_DIR_W;
	ulIdxNeig = getNeighbourByIndices(lIdxX, lIdxY, ucDirection);
	dNeigBedElevW	= dBedElevation [ ulIdxNeig ];
	pNeigDataW		= pCellStateSrc	[ ulIdxNeig ];
	pNeigManW		= dManning [ ulIdxNeig ];
	usePoleniW		= pUsePoleni [ ulIdxNeig ];
	ucDirection = DOMAIN_DIR_S;
	ulIdxNeig = getNeighbourByIndices(lIdxX, lIdxY, ucDirection);
	dNeigBedElevS	= dBedElevation [ ulIdxNeig ];
	pNeigDataS		= pCellStateSrc	[ ulIdxNeig ];
	pNeigManS		= dManning [ ulIdxNeig ];
	usePoleniS		= pUsePoleni [ ulIdxNeig ];
	ucDirection = DOMAIN_DIR_N;
	ulIdxNeig = getNeighbourByIndices(lIdxX, lIdxY, ucDirection);
	dNeigBedElevN	= dBedElevation [ ulIdxNeig ];
	pNeigDataN		= pCellStateSrc	[ ulIdxNeig ];
	pNeigManN		= dManning [ ulIdxNeig ];
	usePoleniN		= pUsePoleni [ ulIdxNeig ];
	ucDirection = DOMAIN_DIR_E;
	ulIdxNeig = getNeighbourByIndices(lIdxX, lIdxY, ucDirection);
	dNeigBedElevE	= dBedElevation [ ulIdxNeig ];
	pNeigDataE		= pCellStateSrc	[ ulIdxNeig ];
	pNeigManE		= dManning [ ulIdxNeig ];
	usePoleniE		= pUsePoleni [ ulIdxNeig ];

	if ( pCellData.x  - dCellBedElev  < VERY_SMALL ) ucDryCount++;
	if ( pNeigDataN.x - dNeigBedElevN < VERY_SMALL ) ucDryCount++;
	if ( pNeigDataE.x - dNeigBedElevE < VERY_SMALL ) ucDryCount++;
	if ( pNeigDataS.x - dNeigBedElevS < VERY_SMALL ) ucDryCount++;
	if ( pNeigDataW.x - dNeigBedElevW < VERY_SMALL ) ucDryCount++;

	// All neighbours are dry? Don't bother calculating
	if ( ucDryCount >= 5 ) return;

	bool debug = false;
	//if(ulIdx==66689){
	//	debug = true;
	//}

	if (!usePoleniN){
		dDischarges[ DOMAIN_DIR_N ] = manning_Solver(
			dLclTimestep,
			dManningCoef,
			pNeigManN,
			pCellData.x,
			pNeigDataN.x,
			dCellBedElev,
			dNeigBedElevN,
			DOMAIN_DELTAX,
			debug
		);
				}else{
					dDischarges[ DOMAIN_DIR_N ] = poleni_Solver(
						dLclTimestep,
						dManningCoef,
						pNeigManN,
						pCellData.x,
						pNeigDataN.x,
						dCellBedElev,
						dNeigBedElevN,
						debug
					);
				}
	if (!usePoleniE){
		dDischarges[ DOMAIN_DIR_E ] = manning_Solver(
			dLclTimestep,
			dManningCoef,
			pNeigManE,
			pCellData.x,
			pNeigDataE.x,
			dCellBedElev,
			dNeigBedElevE,
			DOMAIN_DELTAY,
			debug
		);
				}else{
					dDischarges[ DOMAIN_DIR_E ] = poleni_Solver(
						dLclTimestep,
						dManningCoef,
						pNeigManE,
						pCellData.x,
						pNeigDataE.x,
						dCellBedElev,
						dNeigBedElevE,
						debug
					);
				}
	if (!usePoleniN){
		dDischarges[ DOMAIN_DIR_S ] = manning_Solver(
			dLclTimestep,
			dManningCoef,
			pNeigManS,
			pCellData.x,
			pNeigDataS.x,
			dCellBedElev,
			dNeigBedElevS,
			DOMAIN_DELTAX,
			debug
		);
				}else{
					dDischarges[ DOMAIN_DIR_S ] = poleni_Solver(
						dLclTimestep,
						dManningCoef,
						pNeigManS,
						pCellData.x,
						pNeigDataS.x,
						dCellBedElev,
						dNeigBedElevS,
						debug
					);
				}
	if (!usePoleniN){
		dDischarges[ DOMAIN_DIR_W ] = manning_Solver(
			dLclTimestep,
			dManningCoef,
			pNeigManW,
			pCellData.x,
			pNeigDataW.x,
			dCellBedElev,
			dNeigBedElevW,
			DOMAIN_DELTAY,
			debug
			);
				}else{
					dDischarges[ DOMAIN_DIR_W ] = poleni_Solver(
						dLclTimestep,
						dManningCoef,
						pNeigManW,
						pCellData.x,
						pNeigDataW.x,
						dCellBedElev,
						dNeigBedElevW,
						debug
						);
					}
	
	if( lIdxX == DOMAIN_COLS - 1 || dNeigBedElevE == -9999.0  ){
		dDischarges[DOMAIN_DIR_E].x = 0.0;
		dDischarges[DOMAIN_DIR_E].y = 0.0;
	} 
	if( lIdxY == DOMAIN_ROWS - 1 || dNeigBedElevN == -9999.0  ) {
		dDischarges[DOMAIN_DIR_N].x = 0.0;
		dDischarges[DOMAIN_DIR_N].y = 0.0;
	}
	if( lIdxX == 0               || dNeigBedElevW == -9999.0  ) {
		dDischarges[DOMAIN_DIR_W].x = 0.0;
		dDischarges[DOMAIN_DIR_W].y = 0.0;
	}
	if( lIdxY == 0               || dNeigBedElevS == -9999.0  ) {
		dDischarges[DOMAIN_DIR_S].x = 0.0;
		dDischarges[DOMAIN_DIR_S].y = 0.0;
	}

	dDeltaFSL	= (dDischarges[DOMAIN_DIR_E].x + dDischarges[DOMAIN_DIR_W].x + dDischarges[DOMAIN_DIR_N].x + dDischarges[DOMAIN_DIR_S].x)/(DOMAIN_DELTAX*DOMAIN_DELTAY);
	

	pCellData.z		= dDischarges[DOMAIN_DIR_W].y;
	pCellData.w		= dDischarges[DOMAIN_DIR_S].y;

	// Update the flow state
	pCellData.x		= pCellData.x + dLclTimestep * dDeltaFSL;

	// New max FSL?
	if ( pCellData.x > pCellData.y )
		pCellData.y = pCellData.x;

	// Crazy low depths?
	//if ( pCellData.x - dCellBedElev < VERY_SMALL )
	//	pCellData.x = dCellBedElev;
	
	// Commit to global memory
	pCellStateDst[ ulIdx ] = pCellData;
}


cl_double2 manning_Solver(
	cl_double timestep,		// Current Time-step
	cl_double manning,     	// Manning of Main Cell
	cl_double manning_Neig,	// Manning of Neighbor cell
	cl_double opt_s_Cell,	// Water surface level of Main Cell
	cl_double opt_s_Neig,	// Water surface level of Neighbor cell
	cl_double opt_z_Cell, 	// Bed Elevation of main Cell
	cl_double opt_z_Neig,	// Bed Elevation of Neighbor Cell
	cl_double DeltaXY,
	bool debug				// Debug Flag
	)
	{
		cl_double2 output;
		cl_double dDischarge	= 0.0;
		
		if (opt_s_Neig-opt_z_Neig > flow_epsilon || opt_s_Cell-opt_z_Cell > flow_epsilon){

			cl_double flow_depth	= fmax( opt_s_Cell, opt_s_Neig ) - fmax( opt_z_Neig, opt_z_Cell );

			if (flow_depth > flow_epsilon){

				cl_double delta_h		= opt_s_Neig - opt_s_Cell;
				cl_double abs_delta_h	= fabs(delta_h);

				if(abs_delta_h > flow_epsilon){
					// P1 (Diffusive Scheme)
					dDischarge = 1.0/(0.5*(manning+manning_Neig)) * pow(flow_depth,5.0/3.0) * delta_h / pow(DOMAIN_DELTAX * abs_delta_h,0.5) * DeltaXY;

					// P2 (New Castle Limiter)
					#define FROUDE_LIMIT			0.8
					#define mainVelocity fabs(dDischarge/DeltaXY)/flow_depth
					#define waveVelocity sqrt(GRAVITY*flow_depth)

					if ( dDischarge > 0.0 &&
											( mainVelocity / waveVelocity ) > FROUDE_LIMIT ){
						dDischarge = flow_depth * sqrt( GRAVITY * flow_depth ) * FROUDE_LIMIT * DeltaXY;
					
					}else if ( dDischarge < 0.0 &&
													( mainVelocity / waveVelocity ) > FROUDE_LIMIT ){		
						dDischarge = 0.0 - flow_depth * sqrt( GRAVITY * flow_depth ) * FROUDE_LIMIT * DeltaXY;
					}
				
					// P3 (Lis-Flood Limiter)
					#define DOMAIN_AREA DOMAIN_DELTAX*DOMAIN_DELTAY

					cl_double water_depth = opt_s_Cell - opt_z_Cell;
					cl_double Nwater_depth = opt_s_Neig - opt_z_Neig;

					if (dDischarge > 0.0 && dDischarge > DOMAIN_AREA * abs_delta_h / 4.0 / timestep){
						dDischarge = DOMAIN_AREA * abs_delta_h / 4.0 / timestep;
					}
					else if(dDischarge < 0.0 && -1.0 * dDischarge > DOMAIN_AREA * abs_delta_h / 4.0 / timestep){
						dDischarge = 0 - DOMAIN_AREA * abs_delta_h / 4.0 / timestep;
					}

				}
			}
		}
		
		output.x = dDischarge;
		output.y = dDischarge/DOMAIN_DELTAX/DOMAIN_DELTAY;

		return output;

	}

cl_double2 poleni_Solver(
	cl_double timestep,		// Current Time-step
	cl_double manning,     	// Manning of Main Cell
	cl_double manning_Neig,	// Manning of Neighbor cell
	cl_double opt_s_Cell,	// Water surface level of Main Cell
	cl_double opt_s_Neig,	// Water surface level of Neighbor cell
	cl_double opt_z_Cell, 	// Bed Elevation of main Cell
	cl_double opt_z_Neig,	// Bed Elevation of Neighbor Cell
	bool debug				// Debug Flag
	)
	{
		printf("polini Error");

		cl_double2 output;
		cl_double dDischarge = 0.0;
		cl_double opt_zmax_Neig = fmax( opt_z_Neig, opt_z_Cell );
		cl_double flow_depth	= opt_s_Cell - opt_zmax_Neig;
		cl_double flow_depth_neigh	=  opt_s_Neig - opt_zmax_Neig;
		cl_double reduction_term;

		//noFlow
		if( (flow_depth > 0.0 || flow_depth_neigh > 0.0) && ( fabs(flow_depth - flow_depth_neigh ) > 0.0 ) ) {
			if( flow_depth > 0.0 && flow_depth_neigh <= 0.0){				//flow out of this element without submerged weirflow reduction into the neihgbouring element
				dDischarge = -1.0 * Cfacweir * 1.0/(0.5*(manning+manning_Neig)) * pow(flow_depth, (3.0/2.0));
			}else if(flow_depth <= 0.0 && flow_depth_neigh > 0.0){			//flow out of the neighbouring element without submerged weirflow reduction into this element

				dDischarge = Cfacweir * 1.0/(0.5*(manning+manning_Neig)) * pow(flow_depth_neigh,(3.0/2.0));
			}else if(flow_depth > 0.0 && flow_depth_neigh > 0.0){			//submerged weirflow with reduction
				if(flow_depth > flow_depth_neigh){							//flow into the neihgbouring element
					reduction_term = (1.0-flow_depth_neigh/flow_depth);		//reduction of the discharge (submerged weirflow)
					if(reduction_term <= 0.000463529){						//replace the ^(1/3) by a fitted arctan-function; at the boundary they have the same values
						dDischarge = -1.0 * Cfacweir * 1.0/(0.5*(manning+manning_Neig)) * pow(flow_depth,(3.0/2.0)) * 0.057965266895 * atan(8984.365582471040 * reduction_term);
					}else{
						dDischarge = -1.0 * Cfacweir * 1.0/(0.5*(manning+manning_Neig)) * pow(flow_depth,(3.0/2.0)) * pow(reduction_term,(1.0/3.0));
					}
				}
				else{														//flow into this element
					reduction_term = (1.0 - flow_depth/flow_depth_neigh);	//reduction of the discharge (submerged weirflow)
					if(reduction_term <= 0.000463529){						//replace the ^(1/3) by a fitted arctan-function; at the boundary they have the same values
						dDischarge = Cfacweir * 1.0/(0.5*(manning+manning_Neig)) * pow(flow_depth_neigh,(3.0/2.0)) * 0.057965266895 * atan(8984.365582471040 * reduction_term);
					}else{
						dDischarge = Cfacweir * 1.0/(0.5*(manning+manning_Neig)) * pow(flow_depth_neigh,(3.0/2.0)) * pow(reduction_term,(1.0/3.0));
					}
				}
			}
		}
		output.x = dDischarge;
		output.y = dDischarge/DOMAIN_DELTAX/DOMAIN_DELTAY;

		return output;
	}