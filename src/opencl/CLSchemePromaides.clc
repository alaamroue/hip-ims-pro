/*
 * ------------------------------------------
 *
 *  HIGH-PERFORMANCE INTEGRATED MODELLING SYSTEM (HiPIMS)
 *  Luke S. Smith and Qiuhua Liang
 *  luke@smith.ac
 *
 *  School of Civil Engineering & Geosciences
 *  Newcastle University
 * 
 * ------------------------------------------
 *  This code is licensed under GPLv3. See LICENCE
 *  for more information.
 * ------------------------------------------
 *  INERTIAL SCHEME
 * ------------------------------------------
 *  Implementation of the simplified inertial
 *  scheme
 * ------------------------------------------
 *
 */

/*
 *  Calculate everything without using LDS caching
 */
__kernel REQD_WG_SIZE_FULL_TS
void pro_cacheDisabled ( 
			__constant	cl_double *  				dTimestep,						// Timestep
			__global	cl_double const * restrict	dBedElevation,					// Bed elevation
			__global	cl_double4 *  			pCellStateSrc,					// Current cell state data
			__global	cl_double4 *  			pCellStateDst,					// Current cell state data
			__global	cl_double const * restrict	dManning						// Manning values
		)
{

	// Identify the cell we're reconstructing (no overlap)
	__private cl_long					lIdxX			= get_global_id(0);
	__private cl_long					lIdxY			= get_global_id(1);
	__private cl_ulong					ulIdx, ulIdxNeig;
	__private cl_uchar					ucDirection;
	
	ulIdx = getCellID(lIdxX, lIdxY);

	// Don't bother if we've gone beyond the domain bounds
	if ( lIdxX >= DOMAIN_COLS - 1 || 
		 lIdxY >= DOMAIN_ROWS - 1 || 
		 lIdxX <= 0 || 
		 lIdxY <= 0 ) 
		return;

	__private cl_double		dLclTimestep	= *dTimestep;
	__private cl_double		dManningCoef, dDeltaFSL, pNeigManN, pNeigManE, pNeigManS,pNeigManW;
	__private cl_double		dCellBedElev,dNeigBedElevN,dNeigBedElevE,dNeigBedElevS,dNeigBedElevW;
	__private cl_double4	pCellData,pNeigDataN,pNeigDataE,pNeigDataS,pNeigDataW;					// Z, Zmax, Qx, Qy
	__private cl_double		dDischarge[4];															// Qn, Qe, Qs, Qw
	__private cl_uchar		ucDryCount		= 0;
	

	// Also don't bother if we've gone beyond the total simulation time
	if ( dLclTimestep <= 0.0 )
		return;

	// Load cell data
	dCellBedElev		= dBedElevation[ ulIdx ];
	pCellData			= pCellStateSrc[ ulIdx ];
	dManningCoef		= dManning[ ulIdx ];

	// Cell disabled?
	if ( pCellData.y <= -9999.0 || pCellData.x == -9999.0 )
	{
		pCellStateDst[ ulIdx ] = pCellData;
		return;
	}

	ucDirection = DOMAIN_DIR_W;
	ulIdxNeig = getNeighbourByIndices(lIdxX, lIdxY, ucDirection);
	dNeigBedElevW	= dBedElevation [ ulIdxNeig ];
	pNeigDataW		= pCellStateSrc	[ ulIdxNeig ];
	pNeigManW		= dManning [ ulIdxNeig ];
	ucDirection = DOMAIN_DIR_S;
	ulIdxNeig = getNeighbourByIndices(lIdxX, lIdxY, ucDirection);
	dNeigBedElevS	= dBedElevation [ ulIdxNeig ];
	pNeigDataS		= pCellStateSrc	[ ulIdxNeig ];
	pNeigManS		= dManning [ ulIdxNeig ];
	ucDirection = DOMAIN_DIR_N;
	ulIdxNeig = getNeighbourByIndices(lIdxX, lIdxY, ucDirection);
	dNeigBedElevN	= dBedElevation [ ulIdxNeig ];
	pNeigDataN		= pCellStateSrc	[ ulIdxNeig ];
	pNeigManN		= dManning [ ulIdxNeig ];
	ucDirection = DOMAIN_DIR_E;
	ulIdxNeig = getNeighbourByIndices(lIdxX, lIdxY, ucDirection);
	dNeigBedElevE	= dBedElevation [ ulIdxNeig ];
	pNeigDataE		= pCellStateSrc	[ ulIdxNeig ];
	pNeigManE		= dManning [ ulIdxNeig ];

	if ( pCellData.x  - dCellBedElev  < VERY_SMALL ) ucDryCount++;
	if ( pNeigDataN.x - dNeigBedElevN < VERY_SMALL ) ucDryCount++;
	if ( pNeigDataE.x - dNeigBedElevE < VERY_SMALL ) ucDryCount++;
	if ( pNeigDataS.x - dNeigBedElevS < VERY_SMALL ) ucDryCount++;
	if ( pNeigDataW.x - dNeigBedElevW < VERY_SMALL ) ucDryCount++;

	// All neighbours are dry? Don't bother calculating
	if ( ucDryCount >= 5 ) return;

	// Calculate fluxes
	// -> North
	dDischarge[ DOMAIN_DIR_N ] = manning_Solver(
		dLclTimestep,
		pCellData.x,
		pNeigDataN.x,
		dCellBedElev,
		dNeigBedElevN,
		dManningCoef,
		pNeigManN
	);
	// -> East
	dDischarge[ DOMAIN_DIR_E ] = manning_Solver(
		dLclTimestep,
		pCellData.x,
		pNeigDataE.x,
		dCellBedElev,
		dNeigBedElevE,
		dManningCoef,
		pNeigManE
	);
	// -> South
	dDischarge[ DOMAIN_DIR_S ] = manning_Solver(
		dLclTimestep,
		pCellData.x,
		pNeigDataS.x,
		dCellBedElev,
		dNeigBedElevS,
		dManningCoef,
		pNeigManS
	);
	// -> West
	dDischarge[ DOMAIN_DIR_W ] = manning_Solver(
		dLclTimestep,
		pCellData.x,
		pNeigDataW.x,
		dCellBedElev,
		dNeigBedElevW,
		dManningCoef,
		pNeigManW
	);

	if(ulIdx==51174){
		//printf("Q_N: %f Q_E: %f Q_S: %f Q_W: %f\n",dDischarge[DOMAIN_DIR_N],dDischarge[DOMAIN_DIR_E],dDischarge[DOMAIN_DIR_S],dDischarge[DOMAIN_DIR_W]);
	}

	pCellData.z		= dDischarge[DOMAIN_DIR_W];
	pCellData.w		= dDischarge[DOMAIN_DIR_S];

	// Calculation of change values per timestep and spatial dimension
	dDeltaFSL		= ( dDischarge[DOMAIN_DIR_E] - dDischarge[DOMAIN_DIR_W] + 
					    dDischarge[DOMAIN_DIR_N] - dDischarge[DOMAIN_DIR_S] )/DOMAIN_DELTAY;

	// Update the flow state
	pCellData.x		= pCellData.x + dLclTimestep * dDeltaFSL;

	// New max FSL?
	if ( pCellData.x > pCellData.y )
		pCellData.y = pCellData.x;

	// Crazy low depths?
	if ( pCellData.x - dCellBedElev < VERY_SMALL )
		pCellData.x = dCellBedElev;

	// Commit to global memory
	pCellStateDst[ ulIdx ] = pCellData;
}


cl_double manning_Solver(
	cl_double timestep,
	cl_double opt_s,
	cl_double opt_s_Neig,
	cl_double opt_z,
	cl_double opt_z_Neig,
	cl_double manning,
	cl_double manning_Neig
	)
	{
		
		cl_double dDischarge = 0.0;
		cl_double flow_depth	 = fmax( opt_s_Neig, opt_s ) - fmax( opt_z, opt_z_Neig );
		//cl_double dSlope	 = ( opt_s_Neig - opt_s ) / DOMAIN_DELTAX;

		//diffusive wave
		cl_double delta_h = (opt_s_Neig - opt_s);
		cl_double abs_delta_h = fabs(delta_h);

		// TODO: Alaa Check Domain DeltaX should it be 0.5 or 1.5
		dDischarge = 0.5 * (1.0/manning+1.0/manning_Neig) * pow(DOMAIN_DELTAX,0.5) * pow(flow_depth,5.0/3.0) * delta_h/ pow(abs_delta_h,0.5) / ;

		
		//Froude number discharge limiter
		if ( dDischarge > 0.0 &&
			 ( ( fabs( dDischarge ) / flow_depth ) / sqrt( GRAVITY * flow_depth ) ) > FROUDE_LIMIT )
			dDischarge = flow_depth * sqrt( GRAVITY * flow_depth ) * FROUDE_LIMIT;
		if ( dDischarge < 0.0 &&
			 ( ( fabs( dDischarge ) / flow_depth ) / sqrt( GRAVITY * flow_depth ) ) > FROUDE_LIMIT )
			dDischarge = 0.0 - flow_depth * sqrt( GRAVITY * flow_depth ) * FROUDE_LIMIT;
		

		// Alaa: Does this make better memory access here or should we put it directly after calculation?
		if ( flow_depth < VERY_SMALL )
			dDischarge = 0.0;

		return dDischarge;

	}
